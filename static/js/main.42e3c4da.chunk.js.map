{"version":3,"sources":["assets/img/upload.svg","assets/img/checked.svg","assets/img/close.svg","assets/img/file.svg","components/upload.jsx","utils/index.js","actions/upload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Upload","props","data","dispatch","refHiddenInput","useRef","handleDrop","e","preventDefault","stopPropagation","files","dataTransfer","target","length","existingFiles","filesList","map","f","name","filter","includes","type","inDropZone","setIsConfirm","className","onDrop","onDragOver","dropEffect","handleDragOver","onDragEnter","handleDragEnter","onDragLeave","handleDragLeave","src","UploadSvg","alt","style","marginBottom","ref","id","display","aria-label","multiple","onChange","onClick","event","value","current","click","color","fontSize","cursor","formatBytes","bytes","decimals","dm","i","Math","floor","log","parseFloat","pow","toFixed","myUploadProgress","currentFile","progressEvent","lengthComputable","uploadPercentage","parseInt","round","loaded","total","payload","fileName","progress","uploadDocuments","errorsUpload","promiseArray","file","content","Promise","resolve","reject","reader","FileReader","addEventListener","result","readAsDataURL","getFileContent","then","config","axios","post","filename","size","error","status","fileProgress","message","catch","response","statusMessage","all","numberFiles","errorFiles","App","useState","isConfirm","useReducer","state","action","concat","el","toRemove","find","href","position","top","right","width","height","data-recalc-dims","Blob","fileURL","URL","createObjectURL","key","verticalAlign","marginRight","onError","onerror","FileSvg","whiteSpace","overflow","textOverflow","fontWeight","CheckedSvg","CloseSvg","backgroundImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.42e3c4da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/upload.c2420f0d.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.456b05f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.bbad8f02.svg\";","module.exports = __webpack_public_path__ + \"static/media/file.84cefa90.svg\";","import React, { useRef } from \"react\";\nimport UploadSvg from \"../assets/img/upload.svg\";\nimport \"./style.css\";\nconst Upload = (props) => {\n  const { data, dispatch } = props;\n  const refHiddenInput = useRef(null);\n\n  const handleDragEnter = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    //dispatch({ type: \"SET_DROP_DEPTH\" });\n  };\n  const handleDragLeave = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    dispatch({ type: \"IS_IN_DROP_ZONE\", inDropZone: false });\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"copy\";\n\n    dispatch({ type: \"IS_IN_DROP_ZONE\", inDropZone: true });\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    let files = e.dataTransfer\n      ? [...e.dataTransfer.files]\n      : [...e.target.files];\n\n    if (files && files.length > 0) {\n      const existingFiles = data.filesList.map((f) => f.name);\n      files = files.filter((f) => !existingFiles.includes(f.name));\n\n      dispatch({ type: \"ADD_FILE_TO_LIST\", files });\n      dispatch({ type: \"IS_IN_DROP_ZONE\", inDropZone: false });\n      props.setIsConfirm(true);\n    }\n  };\n\n  return (\n    <div className=\"containerUploader\">\n      <div\n        className={\n          data.inDropZone ? \"containerDrop inside-drag-area\" : \"containerDrop\"\n        }\n        onDrop={(e) => handleDrop(e)}\n        onDragOver={(e) => handleDragOver(e)}\n        onDragEnter={(e) => handleDragEnter(e)}\n        onDragLeave={(e) => handleDragLeave(e)}\n      >\n        <img src={UploadSvg} alt=\"drag and drop\" />\n\n        <div\n          style={{\n            marginBottom: \"32px\",\n          }}\n        >\n          <b>Drop your document here</b> or\n          <input\n            ref={refHiddenInput}\n            type=\"file\"\n            name=\"filesMultiple\"\n            id=\"fileUpload\"\n            style={{ display: \"none\" }}\n            aria-label=\"Carica documenti\"\n            multiple\n            onChange={(e) => handleDrop(e)}\n            onClick={(event) =>\n              /** serve ad gestire una pulizia e conseguente caricamento dello stesso file */\n              (event.target.value = \"\")\n            }\n          />\n          <span\n            onClick={(e) => {\n              refHiddenInput.current.click();\n            }}\n            style={{ color: \"#458DBD\", fontSize: \"20px\", cursor: \"pointer\" }}\n          >\n            {\" \"}\n            browse\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Upload;\n","export function formatBytes(bytes, decimals) {\n  if (bytes === 0) return \"0 Bytes\";\n  let k = 1000;\n  let dm = decimals + 1 || 3;\n  let sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n  let i = Math.floor(Math.log(bytes) / Math.log(k));\n  //return numeral(parseFloat((bytes / Math.pow(k, i)).toFixed(dm))).format(\"0.0,\") + \" \" + sizes[i];\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n}\n","import axios from \"axios\";\n\nexport const DOCUMENT_UPLOAD_START = \"DOCUMENT_UPLOAD_START\";\nexport const DOCUMENT_UPLOAD_ERROR = \"DOCUMENT_UPLOAD_ERROR\";\nexport const DOCUMENT_UPLOAD_SUCCESS = \"DOCUMENT_UPLOAD_SUCCESS\";\nexport const DOCUMENT_UPLOAD_RESET = \"DOCUMENT_UPLOAD_RESET\";\n\nexport const SINGLE_DOCUMENT_UPLOAD_SUCCESS = \"SINGLE_DOCUMENT_UPLOAD_SUCCESS\";\nexport const SINGLE_DOCUMENT_UPLOAD_START = \"SINGLE_DOCUMENT_UPLOAD_START\";\nexport const SINGLE_DOCUMENT_UPLOAD_ERROR = \"SINGLE_DOCUMENT_UPLOAD_ERROR\";\n\nfunction getFileContent(file) {\n  if (file.content && typeof file.content === \"string\") {\n    return new Promise((resolve, reject) => {\n      resolve(file.content);\n    });\n  } else {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.addEventListener(\n        \"load\",\n        function () {\n          resolve(reader.result);\n        },\n        false\n      );\n      reader.readAsDataURL(file);\n    });\n  }\n}\n\nconst myUploadProgress = (currentFile, dispatch) => (progressEvent) => {\n  if (progressEvent.lengthComputable) {\n    currentFile.uploadPercentage = parseInt(\n      Math.round((progressEvent.loaded * 100) / progressEvent.total)\n    );\n    dispatch({\n      type: SINGLE_DOCUMENT_UPLOAD_START,\n      payload: {\n        fileName: currentFile.name,\n        progress: currentFile.uploadPercentage,\n      },\n    });\n  }\n};\n\nexport function uploadDocuments(files, dispatch) {\n  // return function () {\n  dispatch({\n    type: DOCUMENT_UPLOAD_START,\n  });\n\n  let errorsUpload = 0;\n  let promiseArray = files.map((file) => {\n    return getFileContent(file).then((content) => {\n      dispatch({\n        type: SINGLE_DOCUMENT_UPLOAD_START,\n        payload: { fileName: file.name },\n      });\n      const url = \"/\";\n      let config = {};\n      config[\"onUploadProgress\"] = myUploadProgress(file, dispatch);\n      config[\"onDownloadProgress\"] = myUploadProgress(file, dispatch);\n      return axios\n        .post(\n          url,\n          {\n            content: content,\n            filename: file.name,\n            size: file.size,\n          },\n          config\n        )\n        .then((result, error) => {\n          if (result.status === 201 || result.status === 202) {\n            dispatch({\n              type: SINGLE_DOCUMENT_UPLOAD_SUCCESS,\n              payload: {\n                fileName: file.name,\n                fileProgress: file.uploadPercentage,\n              },\n            });\n          } else {\n            errorsUpload++;\n            dispatch({\n              type: SINGLE_DOCUMENT_UPLOAD_ERROR,\n              payload: {\n                status: result.status,\n                fileName: file.name,\n                message:\n                  \"Si è verificato un errore durante caricamento del file\",\n              },\n            });\n          }\n        })\n        .catch((response) => {\n          let statusMessage =\n            file.size > 16000000\n              ? \"Dimensione del file troppo grande\"\n              : \"Si è verificato un errore durante caricamento del file\";\n          errorsUpload++;\n          dispatch({\n            type: SINGLE_DOCUMENT_UPLOAD_ERROR,\n            payload: {\n              fileName: file.name,\n              message: statusMessage,\n              status: 500,\n            },\n          });\n        });\n    });\n  });\n  return axios.all(promiseArray).then((result) => {\n    if (errorsUpload < 1) {\n      dispatch({\n        type: DOCUMENT_UPLOAD_SUCCESS,\n      });\n    } else {\n      // mi servono i documenti totali e gli errori per visualizzare un warning (alcui doc caricati) o un errore(nessun doc caricato)\n      dispatch({\n        type: DOCUMENT_UPLOAD_ERROR,\n        error: {\n          numberFiles: files.length,\n          errorFiles: errorsUpload,\n        },\n      });\n    }\n  });\n  //};\n}\n","import React, { useReducer, useState } from \"react\";\nimport Upload from \"./components/upload\";\nimport CheckedSvg from \"./assets/img/checked.svg\";\nimport CloseSvg from \"./assets/img/close.svg\";\nimport FileSvg from \"./assets/img/file.svg\";\nimport { formatBytes } from \"./utils/index\";\nimport { uploadDocuments } from \"./actions/upload\";\nimport \"./App.css\";\n\nfunction App() {\n  const [isConfirm, setIsConfirm] = useState(false);\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"IS_IN_DROP_ZONE\":\n        return { ...state, inDropZone: action.inDropZone };\n      case \"ADD_FILE_TO_LIST\":\n        return { ...state, filesList: state.filesList.concat(action.files) };\n      case \"REMOVE_FILE_TO_LIST\":\n        return {\n          ...state,\n          filesList: state.filesList.filter((el) => {\n            return el.name !== action.toRemove.name;\n          }),\n        };\n      case \"CLEAR_FILES\":\n        return { inDropZone: false, filesList: [] };\n      case \"SINGLE_DOCUMENT_UPLOAD_START\":\n        let currentFile = state.filesList.find((el) => {\n          return el.name === action.payload.fileName;\n        });\n        if (currentFile) currentFile.progress = action.payload.progress;\n        return { ...state };\n      default:\n        return state;\n    }\n  };\n  const [data, dispatch] = useReducer(reducer, {\n    inDropZone: false,\n    filesList: [],\n  });\n\n  const renderFooter = (props) => {\n    return isConfirm ? (\n      <div className=\"footer\">\n        <div\n          className=\"btn secondary\"\n          onClick={(e) => {\n            dispatch({ type: \"CLEAR_FILES\" });\n          }}\n        >\n          Cancel\n        </div>\n        <div\n          className=\"btn primary\"\n          onClick={(e) => uploadDocuments(data.filesList, dispatch)}\n        >\n          Confirm\n        </div>\n      </div>\n    ) : null;\n  };\n\n  return (\n    <div>\n      <a\n        href=\"https://github.com/reactivegio/uploader_with_progress\"\n        style={{ position: \"fixed\", top: 0, right: 0 }}\n      >\n        <img\n          width=\"149\"\n          height=\"149\"\n          src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149\"\n          className=\"attachment-full size-full\"\n          alt=\"Fork me on GitHub\"\n          data-recalc-dims=\"1\"\n        />\n      </a>\n      <div className=\"titlePage\">Upload file</div>\n      <Upload data={data} dispatch={dispatch} setIsConfirm={setIsConfirm} />\n\n      <div className=\"dropped-files\">\n        {data.filesList.map((f) => {\n          const file = new Blob([f], { type: f.type });\n          //Build a URL from the file\n          const fileURL = URL.createObjectURL(file);\n\n          return (\n            <div key={f.name} className=\"fileContainer\">\n              <img\n                src={fileURL}\n                alt=\"file uploaded\"\n                style={{\n                  width: \"50px\",\n                  height: \"50px\",\n                  verticalAlign: \"middle\",\n                  marginRight: \"16px\",\n                }}\n                onError={(e) => {\n                  e.target.onerror = null;\n                  e.target.src = FileSvg;\n                }}\n              />\n              <div\n                style={{\n                  display: \"inline-block\",\n                  verticalAlign: \"middle\",\n                  whiteSpace: \"nowrap\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  width: \"calc(100% - 66px)\",\n                }}\n              >\n                <span style={{ fontSize: \"13px\", fontWeight: 600 }}>\n                  {f.name}\n                </span>\n                <br />\n                <span style={{ fontSize: \"13px\", color: \"rgb(69, 141, 189)\" }}>\n                  {f.progress\n                    ? formatBytes((f.size * f.progress) / 100, 2) +\n                      \" di \" +\n                      formatBytes(f.size, 2)\n                    : formatBytes(f.size, 2)}\n                </span>\n              </div>\n              {f.progress && f.progress === 100 ? (\n                <div className=\"topIcon\">\n                  <img src={CheckedSvg} alt=\"close icon\" />\n                </div>\n              ) : (\n                <div\n                  className=\"topIcon close\"\n                  onClick={(e) => {\n                    dispatch({ type: \"REMOVE_FILE_TO_LIST\", toRemove: f });\n                  }}\n                >\n                  <img src={CloseSvg} alt=\"close icon\" />\n                </div>\n              )}\n              <div className=\"progressBar \">\n                <div\n                  className=\"progressColored\"\n                  style={{\n                    width: f.progress ? f.progress + \"%\" : 0,\n                    backgroundImage:\n                      \"linear-gradient(274deg, #00c3ea, #0090d1)\",\n                    height: \"100%\",\n                  }}\n                ></div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      {data.filesList.length > 0 ? renderFooter() : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}